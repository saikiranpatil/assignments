/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */


// // Method-1: stiring todos in memory
// const express = require('express');
// const bodyParser = require('body-parser');
// const fs = require("fs");

// const app = express();
// const port = 3000;

// app.use(bodyParser.json());

// let todos = [];

// app.get("/todos", (req, res) => {
//   res.status(200).send(todos);
// })

// app.get("/todos/:id", (req, res) => {
//   const id = req.params.id;
//   const todo = todos.find((element) => element.id === parseInt(id));

//   if (!todo) {
//     res.status(404).send(`todo not found with id: ${id}`);
//   }

//   res.status(200).send(todo);
// })

// app.post("/todos", (req, res) => {

//   const newId = new Date().valueOf();
//   const newTodo = { id: newId, ...req.body };
//   todos.push(newTodo);

//   res.status(201).send({ id: newId });
// })

// app.put("/todos/:id", (req, res) => {
//   const id = req.params.id;
//   const todo = todos.find((element) => element.id === parseInt(id));

//   if (!todo) {
//     res.status(404).send(`todo not found with id: ${id}`);
//   }

//   const updatedTodo = { id, ...req.body };
//   todos = todos.map((todo) => todo.id === parseInt(id) ? updatedTodo : todo);;

//   res.status(200).send(updatedTodo);
// })

// app.delete("/todos/:id", (req, res) => {
//   const id = req.params.id;
//   const todo = todos.find((element) => element.id == id);

//   if (!todo) {
//     res.status(404).send(`todo not found with id: ${id}`);
//   }

//   todos = todos.filter((element) => element.id !== parseInt(id));
//   res.status(200).send(`todo with id:${id} has been deleted sucessfully!`);
// })

// // app.listen(3000, () => {
// //   console.log(`app listening at port http://localhost:${port}`);
// // })

// module.exports = app;


// Method-2: stiring todos in file
const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs");

const app = express();
const port = 3000;

let todos = JSON.parse(fs.readFileSync("todos.json", "utf-8"));

const writeTodos = (todos) => new Promise((resolve) => {
  fs.writeFile("todos.json", JSON.stringify(todos), (err, data) => {
    if (err) {
      console.log(err);
    }
    resolve();
  });
});

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
  res.status(200).send(todos);
})

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  const todo = todos.find((element) => element.id === parseInt(id));

  if (!todo) {
    res.status(404).send(`todo not found with id: ${id}`);
  }

  res.status(200).send(todo);
})

app.post("/todos", (req, res) => {
  const newId = new Date().valueOf();
  const newTodo = { id: newId, ...req.body };
  todos.push(newTodo);

  writeTodos(todos).then(() => {
    res.status(201).send({ id: newId });
  })
})

app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const todo = todos.find((element) => element.id === parseInt(id));

  if (!todo) {
    res.status(404).send(`todo not found with id: ${id}`);
  }

  const updatedTodo = { id, ...req.body };
  todos = todos.map((todo) => todo.id === parseInt(id) ? updatedTodo : todo);

  writeTodos(todos).then(() => {
    res.status(200).send(updatedTodo);
  })
})

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  const todo = todos.find((element) => element.id === parseInt(id));

  if (!todo) {
    res.status(404).send(`todo not found with id: ${id}`);
  }

  todos = todos.filter((element) => element.id !== parseInt(id));
  writeTodos(todos).then(() => {
    res.status(200).send(`todo with id:${id} has been deleted sucessfully!`);
  });
})

// app.listen(3000, () => {
//   console.log(`app listening at port http://localhost:${port}`);
// })

module.exports = app;